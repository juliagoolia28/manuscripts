mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_in_conjunct_parcels/fisherZ_in_parcel.csv")
df_mri_behav <- cbind(df,mri_df)
mri_sig = read.csv("/Volumes/data/users/julie/make_parcels-julie/conjunction/GCSS_output/conj_parcels_thresh1.645_02-Oct-2020/subj_in_parcel.csv", header = FALSE)
require(plyr)
mri_sig = mri_sig %>% rename(parcel_1_sig = V1, parcel_2_sig = V2, parcel_3_sig= V3, parcel_4_sig= V4, parcel_5_sig= V5, parcel_6_sig=V6, parcel_7_sig= V7, parcel_8_sig= V8, parcel_9_sig=V9, parcel_10_sig= V10, parcel_11_sig= V11, parcel_12_sig=V12)
library(dplyr)
df$subject <- gsub ("/s(2)","", df$subject, fixed = TRUE)
df<- df %>% group_by(subject) %>%
summarise_all(funs(na.omit(.)[1]))
df$subject <- as.factor(as.character(df$subject))
## Swap out which MRI output you want to load
#mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/froi_analysis_results/stat_learning_contrast_froi_resp_mag.csv")
#mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_results/fisherZ_in_parcel.csv")
mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_in_conjunct_parcels/fisherZ_in_parcel.csv")
df_mri_behav <- cbind(df,mri_df)
mri_sig = read.csv("/Volumes/data/users/julie/make_parcels-julie/conjunction/GCSS_output/conj_parcels_thresh1.645_02-Oct-2020/subj_in_parcel.csv", header = FALSE)
require(dplyr)
mri_sig = mri_sig %>% rename(parcel_1_sig = V1, parcel_2_sig = V2, parcel_3_sig= V3, parcel_4_sig= V4, parcel_5_sig= V5, parcel_6_sig=V6, parcel_7_sig= V7, parcel_8_sig= V8, parcel_9_sig=V9, parcel_10_sig= V10, parcel_11_sig= V11, parcel_12_sig=V12)
install.packages(dplyr)
"dplyr"
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2);
library(multcomp);
library(nlme);
library(pastecs);
library(reshape)
library(Hmisc);
library (WRS2);
library(lme4);
library(lmerTest);
library(plyr);
library(splitstackshape);
library(ggpubr);
library(corrplot);
library(Rcmdr);
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2);
library(multcomp);
library(nlme);
library(pastecs);
library(reshape)
library(Hmisc);
library (WRS2);
library(lme4);
library(lmerTest);
library(plyr);
library(splitstackshape);
library(ggpubr);
library(corrplot);
library(Rcmdr);
#library(R.matlab);
setwd("/Volumes/data/projects/blast/data_summaries/")
ast_df = read.csv("blast_in_lab_adult/behavioral/blast_assessments_adult.csv")
in_scanner_df <- read.csv("blast_in_lab_adult/behavioral/adult_in_scanner_auditory_behavioral.csv")
SSL_accuracy_df = read.csv("blast_online_adult/breakdown/blast_online_adult_ssl_accuracies.csv")
SSL_rt_df = read.csv("blast_online_adult/breakdown/blast_online_adult_ssl_indiv_rts.csv")
colnames(SSL_accuracy_df)[colnames(SSL_accuracy_df)=="acc_id"] <- "subject"
colnames(SSL_accuracy_df)[colnames(SSL_accuracy_df)=="subj_corr"] <- "SSL_accuracy"
colnames(SSL_rt_df)[colnames(SSL_rt_df)=="par_id"] <- "subject"
colnames(in_scanner_df)[colnames(in_scanner_df)=="auditory_part_id"] <- "subject"
require(plyr)
df <- join_all(list(ast_df, in_scanner_df, SSL_accuracy_df, SSL_rt_df), by = 'subject', type = 'full')
df<- df[!grepl("blast_a_003", df$subject),]
df<- df[!grepl("blast_a_008", df$subject),]
df<- df[!grepl("blast_a_009", df$subject),]
df<- df[!grepl("blast_a_014", df$subject),]
df<- df[!grepl("blast_a_015", df$subject),]
df<- df[!grepl("blast_a_016", df$subject),]
df<- df[!grepl("blast_a_019", df$subject),]
df<- df[!grepl("blast_a_022", df$subject),]
df<- df[!grepl("blast_a_025", df$subject),]
df<- df[!grepl("blast_a_026", df$subject),]
df<- df[!grepl("blast_a_029", df$subject),]
df<- df[!grepl("blast_a_030", df$subject),]
df<- df[!grepl("blast_a_031", df$subject),]
df<- df[!grepl("blast_a_032", df$subject),]
df<- df[!grepl("blast_a_033", df$subject),]
df<- df[!grepl("blast_a_034", df$subject),]
df<- df[!grepl("blast_a_036", df$subject),]
df<- df[!grepl("blast_a_037", df$subject),]
df<- df[!grepl("blast_a_040", df$subject),]
df<- df[!grepl("blast_a_041", df$subject),]
df<- df[!grepl("blast_a_042", df$subject),]
df<- df[!grepl("blast_a_043", df$subject),]
df<- df[!grepl("blast_a_045", df$subject),]
df<- df[!grepl("blast_a_046", df$subject),]
df<- df[!grepl("blast_a_047", df$subject),]
df<- df[!grepl("blast_a_048", df$subject),]
df<- df[!grepl("blast_a_049", df$subject),]
df<- df[!grepl("blast_a_050", df$subject),]
df<- df[!grepl("blast_a_051", df$subject),]
df<- df[!grepl("blast_a_052", df$subject),]
library(dplyr)
df$subject <- gsub ("/s(2)","", df$subject, fixed = TRUE)
df<- df %>% group_by(subject) %>%
summarise_all(funs(na.omit(.)[1]))
df$subject <- as.factor(as.character(df$subject))
## Swap out which MRI output you want to load
#mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/froi_analysis_results/stat_learning_contrast_froi_resp_mag.csv")
#mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_results/fisherZ_in_parcel.csv")
mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_in_conjunct_parcels/fisherZ_in_parcel.csv")
df_mri_behav <- cbind(df,mri_df)
mri_sig = read.csv("/Volumes/data/users/julie/make_parcels-julie/conjunction/GCSS_output/conj_parcels_thresh1.645_02-Oct-2020/subj_in_parcel.csv", header = FALSE)
mri_sig = mri_sig %>% rename(parcel_1_sig = V1, parcel_2_sig = V2, parcel_3_sig= V3, parcel_4_sig= V4, parcel_5_sig= V5, parcel_6_sig=V6, parcel_7_sig= V7, parcel_8_sig= V8, parcel_9_sig=V9, parcel_10_sig= V10, parcel_11_sig= V11, parcel_12_sig=V12)
df_mri_behav<- cbind(df_mri_behav,mri_sig)
View(mri_sig)
#df_mri_behav<- df_mri_behav[!grepl("blast_a_011", df_mri_behav$subject),]
df_mri_behav$structured_ssl_rt_slope_scaled=as.numeric(as.character(df_mri_behav$structured_ssl_rt_slope_scaled))
df_mri_behav$structured_syllable_mean_rt=as.numeric(as.character(df_mri_behav$structured_syllable_mean_rt))
df_mri_behav$structured_ssl_rt_slope=as.numeric(as.character(df_mri_behav$structured_ssl_rt_slope))
df_mri_behav$random_ssl_rt_slope=as.numeric(as.character(df_mri_behav$random_ssl_rt_slope))
df_mri_behav$SSL_accuracy=as.numeric(as.character(df_mri_behav$SSL_accuracy))
df_mri_behav$mean_rt=as.numeric(as.character(df_mri_behav$mean_rt))
df_mri_behav$scaled_rt_slope=as.numeric(as.character(df_mri_behav$scaled_rt_slope))
df_mri_behav$ssl_rt_slope_diff <- (df_mri_behav$structured_ssl_rt_slope-df_mri_behav$random_ssl_rt_slope)
df_mri_behav$parcel_1=as.numeric(as.character(df_mri_behav$parcel_1))
df_mri_behav$parcel_2=as.numeric(as.character(df_mri_behav$parcel_2))
df_mri_behav$parcel_3=as.numeric(as.character(df_mri_behav$parcel_3))
df_mri_behav$parcel_4=as.numeric(as.character(df_mri_behav$parcel_4))
df_mri_behav$parcel_6=as.numeric(as.character(df_mri_behav$parcel_6))
df_mri_behav$parcel_8=as.numeric(as.character(df_mri_behav$parcel_8))
mycorrvars.asl <- c("structured_syllable_mean_rt","SSL_accuracy","structured_ssl_rt_slope","ssl_rt_slope_diff","parcel_1","parcel_2", "parcel_3","parcel_4","parcel_6","parcel_8")
df_corr_asl <- df_mri_behav[mycorrvars.asl]
#Overall Correlation
overall_corr_asl<-rcorr(as.matrix(df_corr_asl))
corrplot(overall_corr_asl$r, method = "color", type = "upper",addCoef.col="dark grey", tl.col = "black", p.mat = overall_corr_asl$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
df_mri_behav$nih_pvt_std=as.numeric(as.character(df_mri_behav$nih_pvt_std))
df_mri_behav$ctopp_nwr_std=as.numeric(as.character(df_mri_behav$ctopp_nwr_std))
df_mri_behav$nih_flanker_std=as.numeric(as.character(df_mri_behav$nih_flanker_std))
df_mri_behav$kbit_matrices_std=as.numeric(as.character(df_mri_behav$kbit_matrices_std))
mycorrvars <- c("structured_ssl_rt_slope", "SSL_accuracy","nih_pvt_std","ctopp_nwr_std","nih_flanker_std","kbit_matrices_std","parcel_1","parcel_2", "parcel_3","parcel_4","parcel_6","parcel_8")
df_corr <- df_mri_behav[mycorrvars]
#Overall Correlation
overall_corr<-rcorr(as.matrix(df_corr))
corrplot(overall_corr$r, method = "color", type = "upper",addCoef.col="dark grey", tl.col = "black", p.mat = overall_corr$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
#Partial Correlation, where each bivariate comparison controls for all other variables in matrix
par_overall_corr <- partial.cor(df_corr, tests=TRUE, use=c("pairwise.complete.obs"))
#pdf(file = "partial_corr_behavior_adjusted.pdf")
corrplot(par_overall_corr$R, method = "color", type = "upper",addCoef.col="black", tl.col = "black", p.mat = par_overall_corr$P.unadj, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
par_overall_corr$P.unadj
library(ggplot2);
library(multcomp);
library(nlme);
library(pastecs);
library(reshape)
library(Hmisc);
library (WRS2);
library(lme4);
library(lmerTest);
library(plyr);
library(splitstackshape);
library(ggpubr);
library(corrplot);
library(Rcmdr);
#library(R.matlab);
setwd("/Volumes/data/projects/blast/data_summaries/")
ast_df = read.csv("blast_in_lab_adult/behavioral/blast_assessments_adult.csv")
in_scanner_df <- read.csv("blast_in_lab_adult/behavioral/adult_in_scanner_auditory_behavioral.csv")
SSL_accuracy_df = read.csv("blast_online_adult/breakdown/blast_online_adult_ssl_accuracies.csv")
SSL_rt_df = read.csv("blast_online_adult/breakdown/blast_online_adult_ssl_indiv_rts.csv")
colnames(SSL_accuracy_df)[colnames(SSL_accuracy_df)=="acc_id"] <- "subject"
colnames(SSL_accuracy_df)[colnames(SSL_accuracy_df)=="subj_corr"] <- "SSL_accuracy"
colnames(SSL_rt_df)[colnames(SSL_rt_df)=="par_id"] <- "subject"
colnames(in_scanner_df)[colnames(in_scanner_df)=="auditory_part_id"] <- "subject"
require(plyr)
df <- join_all(list(ast_df, in_scanner_df, SSL_accuracy_df, SSL_rt_df), by = 'subject', type = 'full')
df<- df[!grepl("blast_a_003", df$subject),]
df<- df[!grepl("blast_a_008", df$subject),]
df<- df[!grepl("blast_a_009", df$subject),]
df<- df[!grepl("blast_a_014", df$subject),]
df<- df[!grepl("blast_a_015", df$subject),]
df<- df[!grepl("blast_a_016", df$subject),]
df<- df[!grepl("blast_a_019", df$subject),]
df<- df[!grepl("blast_a_022", df$subject),]
df<- df[!grepl("blast_a_025", df$subject),]
df<- df[!grepl("blast_a_026", df$subject),]
df<- df[!grepl("blast_a_029", df$subject),]
df<- df[!grepl("blast_a_030", df$subject),]
df<- df[!grepl("blast_a_031", df$subject),]
df<- df[!grepl("blast_a_032", df$subject),]
df<- df[!grepl("blast_a_033", df$subject),]
df<- df[!grepl("blast_a_034", df$subject),]
df<- df[!grepl("blast_a_036", df$subject),]
df<- df[!grepl("blast_a_037", df$subject),]
df<- df[!grepl("blast_a_040", df$subject),]
df<- df[!grepl("blast_a_041", df$subject),]
df<- df[!grepl("blast_a_042", df$subject),]
df<- df[!grepl("blast_a_043", df$subject),]
df<- df[!grepl("blast_a_045", df$subject),]
df<- df[!grepl("blast_a_046", df$subject),]
df<- df[!grepl("blast_a_047", df$subject),]
df<- df[!grepl("blast_a_048", df$subject),]
df<- df[!grepl("blast_a_049", df$subject),]
df<- df[!grepl("blast_a_050", df$subject),]
df<- df[!grepl("blast_a_051", df$subject),]
df<- df[!grepl("blast_a_052", df$subject),]
library(dplyr)
df$subject <- gsub ("/s(2)","", df$subject, fixed = TRUE)
df<- df %>% group_by(subject) %>%
summarise_all(funs(na.omit(.)[1]))
df$subject <- as.factor(as.character(df$subject))
## Swap out which MRI output you want to load
#mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/froi_analysis_results/stat_learning_contrast_froi_resp_mag.csv")
#mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_results/fisherZ_in_parcel.csv")
mri_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_in_conjunct_parcels/fisherZ_in_parcel.csv")
df_mri_behav <- cbind(df,mri_df)
mri_sig = read.csv("/Volumes/data/users/julie/make_parcels-julie/conjunction/GCSS_output/conj_parcels_thresh1.645_02-Oct-2020/subj_in_parcel.csv", header = FALSE)
mri_sig = mri_sig %>% rename(parcel_1_sig= V1, parcel_2_sig= V2, parcel_3_sig=V3, parcel_4_sig= V4, parcel_5_sig= V5, parcel_6_sig=V6, parcel_7_sig= V7, parcel_8_sig= V8, parcel_9_sig=V9, parcel_10_sig= V10, parcel_11_sig= V11, parcel_12_sig=V12)
df_mri_behav<- cbind(df_mri_behav,mri_sig)
df_mri_behav$structured_ssl_rt_slope_scaled=as.numeric(as.character(df_mri_behav$structured_ssl_rt_slope_scaled))
df_mri_behav$structured_syllable_mean_rt=as.numeric(as.character(df_mri_behav$structured_syllable_mean_rt))
df_mri_behav$structured_ssl_rt_slope=as.numeric(as.character(df_mri_behav$structured_ssl_rt_slope))
df_mri_behav$random_ssl_rt_slope=as.numeric(as.character(df_mri_behav$random_ssl_rt_slope))
df_mri_behav$SSL_accuracy=as.numeric(as.character(df_mri_behav$SSL_accuracy))
df_mri_behav$mean_rt=as.numeric(as.character(df_mri_behav$mean_rt))
df_mri_behav$scaled_rt_slope=as.numeric(as.character(df_mri_behav$scaled_rt_slope))
df_mri_behav$ssl_rt_slope_diff <- (df_mri_behav$structured_ssl_rt_slope-df_mri_behav$random_ssl_rt_slope)
df_mri_behav$nih_pvt_std=as.numeric(as.character(df_mri_behav$nih_pvt_std))
df_mri_behav$ctopp_nwr_std=as.numeric(as.character(df_mri_behav$ctopp_nwr_std))
df_mri_behav$nih_flanker_std=as.numeric(as.character(df_mri_behav$nih_flanker_std))
df_mri_behav$kbit_matrices_std=as.numeric(as.character(df_mri_behav$kbit_matrices_std))
#df_mri_behav<- df_mri_behav[!grepl("blast_a_011", df_mri_behav$subject),]
df_mri_behav$parcel_1=as.numeric(as.character(df_mri_behav$parcel_1))
df_mri_behav$parcel_2=as.numeric(as.character(df_mri_behav$parcel_2))
df_mri_behav$parcel_3=as.numeric(as.character(df_mri_behav$parcel_3))
df_mri_behav$parcel_4=as.numeric(as.character(df_mri_behav$parcel_4))
df_mri_behav$parcel_6=as.numeric(as.character(df_mri_behav$parcel_6))
df_mri_behav$parcel_8=as.numeric(as.character(df_mri_behav$parcel_8))
mycorrvars.asl <- c("structured_syllable_mean_rt","SSL_accuracy","structured_ssl_rt_slope","ssl_rt_slope_diff","parcel_1","parcel_2", "parcel_3","parcel_4","parcel_6","parcel_8")
df_corr_asl <- df_mri_behav[mycorrvars.asl]
#Overall Correlation
overall_corr_asl<-rcorr(as.matrix(df_corr_asl))
corrplot(overall_corr_asl$r, method = "color", type = "upper",addCoef.col="dark grey", tl.col = "black", p.mat = overall_corr_asl$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
mri_rval_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/corr_analysis_in_conjunct_parcels/rval_in_parcel.csv")
t.test(mri_rval_df$parcel_1, mu = 0, alternative = "two.sided")
t.test(mri_rval_df$parcel_2, mu = 0, alternative = "two.sided")
t.test(mri_rval_df$parcel_3, mu = 0, alternative = "two.sided")
t.test(mri_rval_df$parcel_4, mu = 0, alternative = "two.sided")
t.test(mri_rval_df$parcel_6, mu = 0, alternative = "two.sided")
t.test(mri_rval_df$parcel_8, mu = 0, alternative = "two.sided")
ggboxplot(mri_rval_df$parcel_1,
ylab = "Correlation (r)", xlab = "Parcel 1",
ggtheme = theme_minimal())
froi_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/froi_analysis_results/stat_learning_contrast_froi_resp_mag.csv")
t.test(froi_df$parcel_1, mu = 0, alternative = "two.sided")
t.test(froi_df$parcel_2, mu = 0, alternative = "two.sided")
t.test(froi_df$parcel_3, mu = 0, alternative = "two.sided")
t.test(froi_df$parcel_4, mu = 0, alternative = "two.sided")
t.test(froi_df$parcel_6, mu = 0, alternative = "two.sided")
t.test(froi_df$parcel_8, mu = 0, alternative = "two.sided")
ggboxplot(froi_df$parcel_1,
ylab = "Magnitude of Response", xlab = "Parcel 4",
ggtheme = theme_minimal())
froi_bind <- cbind(df,froi_df)
froi_bind$parcel_1=as.numeric(as.character(froi_bind$parcel_1))
froi_bind$parcel_2=as.numeric(as.character(froi_bind$parcel_2))
froi_bind$parcel_3=as.numeric(as.character(froi_bind$parcel_3))
froi_bind$parcel_4=as.numeric(as.character(froi_bind$parcel_4))
froi_bind$parcel_6=as.numeric(as.character(froi_bind$parcel_6))
froi_bind$parcel_7=as.numeric(as.character(froi_bind$parcel_7))
froi_bind$parcel_8=as.numeric(as.character(froi_bind$parcel_8))
froi_bind$parcel_9=as.numeric(as.character(froi_bind$parcel_9))
froi_bind$parcel_11=as.numeric(as.character(froi_bind$parcel_11))
froi_bind$parcel_12=as.numeric(as.character(froi_bind$parcel_12))
froi_bind$nih_pvt_std=as.numeric(as.character(froi_bind$nih_pvt_std))
froi_bind$ctopp_nwr_std=as.numeric(as.character(froi_bind$ctopp_nwr_std))
froi_bind$nih_flanker_std=as.numeric(as.character(froi_bind$nih_flanker_std))
froi_bind$kbit_matrices_std=as.numeric(as.character(froi_bind$kbit_matrices_std))
froi_bind$structured_ssl_rt_slope=as.numeric(as.character(froi_bind$structured_ssl_rt_slope))
froi_bind$SSL_accuracy=as.numeric(as.character(froi_bind$SSL_accuracy))
froi_bind$structured_syllable_mean_rt=as.numeric(as.character(froi_bind$structured_syllable_mean_rt))
mycorrvars <- c("structured_ssl_rt_slope", "SSL_accuracy","structured_syllable_mean_rt","nih_pvt_std","ctopp_nwr_std","nih_flanker_std","kbit_matrices_std","parcel_1","parcel_2", "parcel_3","parcel_4","parcel_6","parcel_8")
froi_corr <- froi_bind[mycorrvars]
froi_corr<-rcorr(as.matrix(froi_corr))
corrplot(froi_corr$r, method = "color", type = "upper",addCoef.col="dark grey", tl.col = "black", p.mat = froi_corr$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
IC_df<- cbind(mri_sig,froi_bind)
t.test(parcel_1 ~ parcel_1_sig, data = IC_df)
t.test(parcel_2 ~ parcel_2_sig, data = IC_df)
t.test(parcel_3 ~ parcel_3_sig, data = IC_df)
t.test(parcel_4 ~ parcel_4_sig, data = IC_df)
t.test(parcel_6 ~ parcel_6_sig, data = IC_df)
t.test(parcel_8 ~ parcel_8_sig, data = IC_df)
ggplot(IC_df, aes(group=parcel_1_sig, y=parcel_1)) +
geom_boxplot()+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
theme_ipsum()
mycorrvars <- c("structured_ssl_rt_slope", "SSL_accuracy","nih_pvt_std","ctopp_nwr_std","nih_flanker_std","kbit_matrices_std","parcel_1","parcel_2", "parcel_3","parcel_4","parcel_6","parcel_8")
df_corr <- df_mri_behav[mycorrvars]
#Overall Correlation
overall_corr<-rcorr(as.matrix(df_corr))
corrplot(overall_corr$r, method = "color", type = "upper",addCoef.col="dark grey", tl.col = "black", p.mat = overall_corr$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
#Partial Correlation, where each bivariate comparison controls for all other variables in matrix
par_overall_corr <- partial.cor(df_corr, tests=TRUE, use=c("pairwise.complete.obs"))
#pdf(file = "partial_corr_behavior_adjusted.pdf")
corrplot(par_overall_corr$R, method = "color", type = "upper",addCoef.col="black", tl.col = "black", p.mat = par_overall_corr$P.unadj, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
par_overall_corr$P.unadj
## Web-based Accuracy & RT Slope (non-signficant)
mri.web.cor <- cor.test(df_mri_behav$SSL_accuracy, df_mri_behav$structured_ssl_rt_slope, alternative = "less", method = c("pearson"))
mri.web.cor$p.value
mri.web.cor$estimate
df_mri_behav<- df_mri_behav[!grepl("blast_a_011", df_mri_behav$subject),]
t.test(structured_ssl_rt_slope ~ parcel_1_sig, data = df_mri_behav)
t.test(SSL_accuracy ~ parcel_1_sig, data = df_mri_behav)
t.test(parcel_1 ~ parcel_1_sig, data = df_mri_behav)
t.test(structured_ssl_rt_slope ~ parcel_2_sig, data = df_mri_behav)
t.test(SSL_accuracy ~ parcel_2_sig, data = df_mri_behav)
t.test(parcel_2 ~ parcel_2_sig, data = df_mri_behav)
t.test(structured_ssl_rt_slope ~ parcel_3_sig, data = df_mri_behav)
t.test(SSL_accuracy ~ parcel_3_sig, data = df_mri_behav)
t.test(parcel_3 ~ parcel_3_sig, data = df_mri_behav)
t.test(structured_ssl_rt_slope ~ parcel_4_sig, data = df_mri_behav)
t.test(SSL_accuracy ~ parcel_4_sig, data = df_mri_behav)
t.test(parcel_4 ~ parcel_4_sig, data = df_mri_behav)
t.test(structured_ssl_rt_slope ~ parcel_6_sig, data = df_mri_behav)
t.test(SSL_accuracy ~ parcel_6_sig, data = df_mri_behav)
t.test(parcel_6 ~ parcel_6_sig, data = df_mri_behav)
t.test(structured_ssl_rt_slope ~ parcel_8_sig, data = df_mri_behav)
t.test(SSL_accuracy ~ parcel_8_sig, data = df_mri_behav)
t.test(parcel_8 ~ parcel_8_sig, data = df_mri_behav)
library(tidyverse)
library(hrbrthemes)
library(viridis)
ggplot(df_mri_behav, aes(group=parcel_1_sig, y=structured_ssl_rt_slope)) +
geom_boxplot()+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
theme_minimal() + ylab("RT Slope") + xlab("Left STG, anterior")
ggplot(df_mri_behav, aes(group=parcel_8_sig, y=structured_ssl_rt_slope)) +
geom_boxplot()+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
theme_minimal() + ylab("RT Slope") + xlab("Right STG, posterior")
beta_weights_df = read.csv("/Volumes/data/users/julie/make_parcels-julie/conjunction/GCSS_output/GCSS.report.output/merged_parcel_betaweights.csv")
df_bw <- cbind(df,beta_weights_df)
mybwcorrvars <- c("structured_ssl_rt_slope", "SSL_accuracy","parcel_1","parcel_2", "parcel_3","parcel_4","parcel_6","parcel_8")
df_bw_corr <- df_bw[mybwcorrvars]
df_bw_corr <- mutate_all(df_bw_corr, function(x) as.numeric(as.character(x)))
#Overall Correlation
overall_corr<-rcorr(as.matrix(df_bw_corr))
corrplot(overall_corr$r, method = "color", type = "upper",addCoef.col="dark grey", tl.col = "black", p.mat = overall_corr$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
overall_corr$P
#Partial Correlation, where each bivariate comparison controls for all other variables in matrix
par_overall_corr <- partial.cor(df_bw_corr, tests=TRUE, use=c("pairwise.complete.obs"))
#pdf(file = "partial_corr_behavior_adjusted.pdf")
corrplot(par_overall_corr$R, method = "color", type = "upper",addCoef.col="black", tl.col = "black", p.mat = par_overall_corr$P.unadj, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
par_overall_corr$P.unadj
corrplot(overall_corr$r, overall_corr$P, insig = "label_sig", pch.col = "white",
pch = "p<.05", pch.cex = .5, order = "AOE")
corrplot(overall_corr$r, overall_corr$P, insig = "label_sig", pch.col = "white",pch = "p<.05", pch.cex = .5, order = "AOE")
corrplot(overall_corr, overall_corr$P, insig = "label_sig", pch.col = "white",pch = "p<.05", pch.cex = .5, order = "AOE")
res1 <-cor.mtest(df_bw_corr,conf.level = .95)
corrplot(df_bw_corr, res1$P, insig = "label_sig", pch.col = "white",pch = "p<.05", pch.cex = .5, order = "AOE")
corrplot(res1, res1$P, insig = "label_sig", pch.col = "white",pch = "p<.05", pch.cex = .5, order = "AOE")
corrplot(overall_corr$r, method = "color", type = "upper",pch.col = "white",pch = "p<.05", pch.cex = .5, p.mat = overall_corr$P, sig.level = 0.05, insig = "blank", tl.cex = 0.9)
corrplot(overall_corr$r, method = "color", type = "upper",pch.col = "white",pch = "p<.05", pch.cex = .5, p.mat = overall_corr$P, insig = "blank", tl.cex = 0.9)
corrplot(overall_corr$r, method = "color", type = "upper",pch.col = "white",pch = "p<.05", pch.cex = .5, p.mat = overall_corr$P, insig = "blank")
corrplot(overall_corr$r, method = "color", type = "upper",pch.col = "white",pch = "p<.05", pch.cex = .5, insig = "blank")
overall_corr$P
df.rcx.p = as.data.frame(overall_corr$P)
View(df.rcx.p)
write.csv(df.rcx.p,"/Volumes/data/users/julie/make_parcels-julie/beta_weight_corr_p.csv")
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
old_corr= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
#Loading library
library(ez); library(ggplot2); library(multcomp); library(nlme); library(pastecs); library(reshape)
library(Hmisc); library (WRS2); library(lme4); library(lmerTest); library(plyr); library(splitstackshape)
library(naniar); library(tidyr); library(dplyr); library(memisc); library(psychReport); library(foreign); library(interactions); library(tableone); library(officer); library(magrittr); library(corrplot); library(effectsize); library(Rcmdr)
julie.theme <- theme_bw() + theme(axis.line = element_line(colour = "black"), panel.grid.minor = element_blank(), panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), legend.title= element_blank())  #custom graphics theme for ggplot2
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
old_corr= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
ERP_corr=read.csv("stats_output_010520.csv")
View(old_corr)
View(old_corr)
View(old_corr)
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
old_corr= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
ERP_corr=read.csv("stats_output_010521.csv")
View(old_corr)
View(ERP_corr)
myvars <- c("Not_Related","Related")
newdf <- ERP_corr[myvars]
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
old_corr= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
ERP_corr=read.csv("stats_output_010521.csv")
myvars <- c("Not_related","Related")
newdf <- ERP_corr[myvars]
View(newdf)
View(old_corr)
mytfvars <- c("UnrelatedERSP","RelatedERSP")
newdf <- ERP_corr[mytfvars]
mytfvars <- c("UnrelatedERSP","RelatedERSP")
newdf <- old_corr[mytfvars]
df <- rbind(tfdf,newdf)
mytfvars <- c("UnrelatedERSP","RelatedERSP")
tfdf <- old_corr[mytfvars]
df <- rbind(tfdf,newdf)
View(df)
df <- cbind(tfdf,newdf)
View(df)
myvars <- c("Not_related","Related")
newdf <- ERP_corr[myvars]
mytfvars <- c("UnrelatedERSP","RelatedERSP")
tfdf <- old_corr[mytfvars]
df <- cbind(tfdf,newdf)
df$ERPdiff <- df$Not_related - df$Related
df$ERPdiff <- df$Not_related - df$Related
df$ERSPdiff <- df$UnrelatedERSP - df$RelatedERSP
cor.test(df$ERPdiff, df$ERSPdiff, method=c("pearson"))
cor.test(df$ERPdiff, df$ERSPdiff, method=c("spearman"))
t.test(df$Not_related, df$Related)
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
old_corr= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
ERP_corr=read.csv("stats_output_010521.csv")
myvars <- c("Not_related","Related")
newdf <- ERP_corr[myvars]
mytfvars <- c("UnrelatedERSP","RelatedERSP")
tfdf <- old_corr[mytfvars]
df <- cbind(tfdf,newdf)
t.test(df$Not_related, df$Related)
t.test(df$Not_related, df$Related, paired = TRUE)
df$ERPdiff <- df$Not_related - df$Related
df$ERSPdiff <- df$UnrelatedERSP - df$RelatedERSP
cor.test(df$ERPdiff, df$ERSPdiff, method=c("spearman"))
cor.test(df$ERPdiff, df$ERSPdiff, method=c("pearson"))
t.test(df$Not_related, df$Related, paired = TRUE)
mean(df$Not_related)
mean(df$Related)
cor.test(df$ERPdiff, df$ERSPdiff, method=c("pearson"))
cor.test(df$RelatedERSP,df$Related, method=c("pearson"))
View(old_corr)
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
corr= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
View(old_corr)
View(corr)
t.test(df$UnrelatedERP, df$RelatedERP, paired = TRUE)
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
df= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
t.test(df$UnrelatedERP, df$RelatedERP, paired = TRUE)
mean(df$UnrelatedERP)
mean(df$RelatedERP)
t.test(df$UnrelatedERP, df$RelatedERP, paired = FALSE)
mean(df$UnrelatedERP)
mean(df$RelatedERP)
cor.test(df$ERPdiff, df$ERSPdiff, method=c("pearson"))
cor.test(df$DiffERP, df$DiffERSP, method=c("pearson"))
t.test(df$UnrelatedERP, df$RelatedERP)
mean(df$UnrelatedERP)
mean(df$RelatedERP)
t.test(df$UnrelatedERP, df$RelatedERP, paired =TRUE)
mean(df$UnrelatedERP)
mean(df$RelatedERP)
#Loading library
library(ez); library(ggplot2); library(multcomp); library(nlme); library(pastecs); library(reshape)
library(Hmisc); library (WRS2); library(lme4); library(lmerTest); library(plyr); library(splitstackshape)
library(naniar); library(tidyr); library(dplyr); library(memisc); library(psychReport); library(foreign); library(interactions); library(tableone); library(officer); library(magrittr); library(corrplot); library(effectsize); library(Rcmdr)
julie.theme <- theme_bw() + theme(axis.line = element_line(colour = "black"), panel.grid.minor = element_blank(), panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), legend.title= element_blank())  #custom graphics theme for ggplot2
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
df= read.spss("Correlation_Analysis.sav", to.data.frame=TRUE)
df_new = read.csv('erp_stats.csv')
t.test(df$UnrelatedERP, df$RelatedERP, paired =TRUE)
mean(df$UnrelatedERP)
mean(df$RelatedERP)
t.test(df_new$Unrelated_ERP, df_new$Related_ERP, paired =TRUE)
t.test(df_new$Unrelated_ERP, df_new$Related_ERP, paired =TRUE)
View(df)
View(df_new)
t.test(df$UnrelatedERP, df$RelatedERP, paired =TRUE)
mean(df$UnrelatedERP)
mean(df$RelatedERP)
t.test(df_new$Unrelated_ERP, df_new$Related_ERP, paired =TRUE)
t.test(df_new$Unrelated_ERSP, df_new$Related_ERSP, paired =TRUE)
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
df_new = read.csv('erp_stats.csv')
t.test(df_new$Unrelated_ERP, df_new$Related_ERP, paired =TRUE)
mean(df_new$Unrelated_ERP)
mean(df_new$Related_ERP)
t.test(df_new$Unrelated_ERSP, df_new$Related_ERSP, paired =TRUE)
mean(df_new$Unrelated_ERSP)
mean(df_new$Related_ERSP)
#jpeg("Figs/vocab_regression.jpeg")
ggplot(df, aes(x=ERP_diff, y = ERSP_diff)) + labs(title="Relationship between N400 & Theta", y = "Theta Amplitude", x = "N400 Amplitude") + geom_point(size=2,color='#E69F00') + julie.theme+ theme(plot.title = element_text(hjust = 0.5)) + geom_smooth(method=lm,  linetype="dashed",
color="black")
#Loading library
library(ez); library(ggplot2); library(multcomp); library(nlme); library(pastecs); library(reshape)
library(Hmisc); library (WRS2); library(lme4); library(lmerTest); library(plyr); library(splitstackshape)
library(naniar); library(tidyr); library(dplyr); library(memisc); library(psychReport); library(foreign); library(interactions); library(tableone); library(officer); library(magrittr); library(corrplot); library(effectsize); library(Rcmdr)
julie.theme <- theme_bw() + theme(axis.line = element_line(colour = "black"), panel.grid.minor = element_blank(), panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), legend.title= element_blank())  #custom graphics theme for ggplot2
setwd('/Users/julieschneider/Google Drive File Stream/My Drive/Manuscripts/manuscripts/semantic_processing/ERP')
df_new = read.csv('erp_stats.csv')
t.test(df_new$Unrelated_ERP, df_new$Related_ERP, paired =TRUE)
mean(df_new$Unrelated_ERP)
mean(df_new$Related_ERP)
t.test(df_new$Unrelated_ERSP, df_new$Related_ERSP, paired =TRUE)
cor.test(df_new$ERP_diff,df_new$ERSP_diff, method = c("pearson"))
cor.test(df_new$Related_ERP,df_new$Related_ERSP, method = c("pearson"))
cor.test(df_new$Unrelated_ERP,df_new$Unrelated_ERSP, method = c("pearson"))
#jpeg("Figs/vocab_regression.jpeg")
ggplot(df, aes(x=ERP_diff, y = ERSP_diff)) + labs(title="Relationship between N400 & Theta", y = "Theta Amplitude", x = "N400 Amplitude") + geom_point(size=2,color='#E69F00') + julie.theme+ theme(plot.title = element_text(hjust = 0.5)) + geom_smooth(method=lm,  linetype="dashed",
color="black")
View(df_new)
#jpeg("Figs/vocab_regression.jpeg")
ggplot(df_new, aes(x=ERP_diff, y = ERSP_diff)) + labs(title="Relationship between N400 & Theta", y = "Theta Amplitude", x = "N400 Amplitude") + geom_point(size=2,color='#E69F00') + julie.theme+ theme(plot.title = element_text(hjust = 0.5)) + geom_smooth(method=lm,  linetype="dashed",
color="black")
#dev.off()
jpeg("Figs/correlation.jpeg")
ggplot(df_new, aes(x=ERP_diff, y = ERSP_diff)) + labs(title="Relationship between N400 & Theta", y = "Theta Amplitude", x = "N400 Amplitude") + geom_point(size=2,color='#E69F00') + julie.theme+ theme(plot.title = element_text(hjust = 0.5)) + geom_smooth(method=lm,  linetype="dashed",
color="black")
dev.off()
jpeg("correlation.jpeg")
ggplot(df_new, aes(x=ERP_diff, y = ERSP_diff)) + labs(title="Relationship between N400 & Theta", y = "Theta Amplitude", x = "N400 Amplitude") + geom_point(size=2,color='#E69F00') + julie.theme+ theme(plot.title = element_text(hjust = 0.5)) + geom_smooth(method=lm,  linetype="dashed",
color="black")
dev.off()
